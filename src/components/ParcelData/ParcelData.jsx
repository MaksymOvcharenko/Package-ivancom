import { useDispatch, useSelector } from "react-redux";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import styles from "./ParcelData.module.css";
import CargoDescriptionSelector from "../NovaPoshtaComponent/CargoDescriptionSelector.jsx";
import {
  setParcelData,
  calculateValues,
  applyPromoCode,
  clearPromoCheck,
} from "../../redux/form/formSlice";
import { selectParcel } from "../../redux/form/formSelectors";
import AllSumm from "../AllSumm/AllSumm.jsx";
import icons from "../../image/icons.svg";
import { useEffect } from "react";

import { validatePromoByPhone } from "../../redux/form/formSlice"; // üëà –¥–æ–¥–∞–π validatePromoByPhone
import { toast } from "react-toastify";

const validationSchema = Yup.object().shape({
  valuation: Yup.number()
    .required("–í–∞—Ä—Ç—ñ—Å—Ç—å –æ–±–æ–≤'—è–∑–∫–æ–≤–∞")
    .min(35, "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 35 PLN")
    .max(10000, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å 10000 PLN"),
  size: Yup.string().required("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä —Å–∫—Ä–∏—Ç–∫–∏"),
  cargoDescription: Yup.array()
    .min(1, "–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –ø–æ—Å–∏–ª–∫–∏") // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ–± –±—É–≤ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç
    .required("–í–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –ø–æ—Å–∏–ª–∫–∏"),
});

const ParcelData = ({ onNext, onPrev }) => {
  const dispatch = useDispatch();
  const parcel = useSelector(selectParcel) || {};
  const senderPhone = useSelector((s) => s.form?.sender?.phone);
  const receiverPhone = useSelector((s) => s.form?.receiver?.phone);
  const promoCheck = useSelector((s) => s.form?.promoCheck);

  const isChecking = promoCheck?.status === "loading";
  useEffect(() => {
    window.scrollTo(0, 0); // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ —Å–∞–º–æ–≥–æ –≤–µ—Ä—Ö—É
  }, []);
  return (
    <Formik
      initialValues={{
        valuation: parcel.valuation || "",
        size: parcel.size || "",
        cargoDescription: parcel.cargoDescription || "",
      }}
      validationSchema={validationSchema}
      onSubmit={(values) => {
        if (promoCheck?.alreadyUsed) {
          toast.error("‚ùå –¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥—ñ–π—Å–Ω–∏–π");
          return;
        }
        dispatch(setParcelData(values)); // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Å—Ç–µ–π—Ç—ñ
        onNext(); // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫
      }}
      validateOnChange={true} // –í–º–∏–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ
    >
      {({ setFieldValue, values }) => {
        const promoCodeEntered = values?.promocode?.trim();
        const isPromoUsed =
          !!promoCodeEntered &&
          promoCheck?.status === "success" &&
          promoCheck?.alreadyUsed === true;
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å —ñ –≤–∏–∫–ª–∏–∫—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        const handleFieldChange = (field, value) => {
          setFieldValue(field, value);
          dispatch(
            setParcelData({
              ...values,
              [field]: value,
            })
          );
          dispatch(calculateValues());
        };

        return (
          <Form className={styles.form}>
            <h1 className={styles.krok2H1}>–ö—Ä–æ–∫ 2</h1>
            {/* –í–∏–±—ñ—Ä —Å–∫—Ä–∏—Ç–∫–∏ */}
            <div className={styles.divField}>
              <label className={styles.label}>–°–∫—Ä–∏–Ω—å–∫–∞:</label>
              <div className={styles.divRadio}>
                <label className={styles.labelRadio}>
                  <input
                    className={styles.radio}
                    type="radio"
                    name="size"
                    value="A"
                    onChange={() => handleFieldChange("size", "A")}
                    id="sizeA"
                  />
                  <div className={styles.divRadioLabel}>
                    <span className={styles.customRadio}></span>
                    <span className={styles.radioText}>–°–∫—Ä–∏–Ω—å–∫–∞ A</span>
                  </div>
                  <span className={styles.boxSize}>
                    <svg className={styles.svgSize} width="15" height="15">
                      <use href={`${icons}#icon-box-size`}></use>
                    </svg>
                    –î–æ 5 –∫–≥ | 8*38*60 —Å–º
                  </span>
                </label>

                <label className={styles.labelRadio}>
                  <input
                    className={styles.radio}
                    type="radio"
                    name="size"
                    value="B"
                    onChange={() => handleFieldChange("size", "B")}
                    id="sizeB"
                  />
                  <div className={styles.divRadioLabel}>
                    <span className={styles.customRadio}></span>
                    <span className={styles.radioText}>–°–∫—Ä–∏–Ω—å–∫–∞ B</span>
                  </div>
                  <span className={styles.boxSize}>
                    <svg className={styles.svgSize} width="15" height="15">
                      <use href={`${icons}#icon-box-size`}></use>
                    </svg>
                    –î–æ 10 –∫–≥ | 19*38*60 —Å–º
                  </span>
                </label>

                <label className={styles.labelRadio}>
                  <input
                    className={styles.radio}
                    type="radio"
                    name="size"
                    value="C"
                    onChange={() => handleFieldChange("size", "C")}
                    id="sizeC"
                  />
                  <div className={styles.divRadioLabel}>
                    <span className={styles.customRadio}></span>
                    <span className={styles.radioText}>–°–∫—Ä–∏–Ω—å–∫–∞ C</span>
                  </div>
                  <span className={styles.boxSize}>
                    <svg className={styles.svgSize} width="15" height="15">
                      <use href={`${icons}#icon-box-size`}></use>
                    </svg>
                    –î–æ 25 –∫–≥ | 41*38*60 —Å–º
                  </span>
                </label>
              </div>
              <ErrorMessage
                name="size"
                component="p"
                className={styles.error}
              />
            </div>

            {/* –û—Ü—ñ–Ω–æ—á–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å */}
            <div className={styles.divField}>
              <label className={styles.label}>–û–≥–æ–ª–æ—à–µ–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:</label>
              <Field
                className={styles.valuation}
                type="number"
                name="valuation"
                placeholder="(PLN)"
                value={values.valuation}
                onChange={(e) => {
                  const value = e.target.value.replace(/^0+/, ""); // –í–∏–¥–∞–ª—è—î –≤—Å—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –Ω—É–ª—ñ
                  handleFieldChange("valuation", value ? Number(value) : ""); // –û–Ω–æ–≤–ª—é—î —Å—Ç–µ–π—Ç
                }}
              />
              <ErrorMessage
                name="valuation"
                component="p"
                className={styles.error}
              />
            </div>

            {/* –û–ø–∏—Å –≤–º—ñ—Å—Ç—É */}
            <div className={styles.divField}>
              <CargoDescriptionSelector
                onSelect={(value) =>
                  handleFieldChange("cargoDescription", value)
                }
              />
              <ErrorMessage
                name="cargoDescription"
                component="p"
                className={styles.error}
              />
            </div>
            {/* <div className={styles.divField}>
              <label className={styles.label}>–ü—Ä–æ–º–æ–∫–æ–¥:</label>
              <Field
                className={styles.valuation}
                type="text"
                name="promocode"
                placeholder="–ü—Ä–æ–º–æ–∫–æ–¥"
                value={values.promocode}
                onChange={(e) => {
                  const value = e.target.value.toUpperCase(); // –í–∏–¥–∞–ª—è—î –≤—Å—ñ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –Ω—É–ª—ñ
                  handleFieldChange("promocode", value ? value : ""); // –û–Ω–æ–≤–ª—é—î —Å—Ç–µ–π—Ç
                  dispatch(applyPromoCode({ promoCode: value }));
                }}
              />
            </div> */}
            <div className={styles.divField}>
              <label className={styles.label}>–ü—Ä–æ–º–æ–∫–æ–¥:</label>
              <Field
                className={styles.valuation}
                type="text"
                name="promocode"
                placeholder="–ü—Ä–æ–º–æ–∫–æ–¥"
                value={values.promocode}
                onChange={(e) => {
                  const value = e.target.value.toUpperCase();
                  handleFieldChange("promocode", value || "");
                  dispatch(clearPromoCheck());
                  // ‚ùå –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ applyPromoCode —Ç—É—Ç, —â–æ–± –Ω–µ –∑–Ω–∏–∂—É–≤–∞—Ç–∏ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                }}
                onBlur={async (e) => {
                  const code = e.target.value.trim().toUpperCase();
                  if (!code) return;
                  const phone = senderPhone || receiverPhone || "";

                  // –±–µ–∫-–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
                  const res = await dispatch(
                    validatePromoByPhone({ phone, code })
                  );

                  // —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî —Ç–æ–¥—ñ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∑–Ω–∏–∂–∫—É
                  if (res?.payload?.available) {
                    dispatch(applyPromoCode({ promoCode: code }));
                    toast.success("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ!");
                  } else if (res?.payload?.alreadyUsed) {
                    toast.error("‚ùå –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥");
                  } else if (res?.payload && res?.payload.available === false) {
                    toast.warning("‚ö†Ô∏è –¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
                  }
                }}
              />

              {/* –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —ñ–Ω–ø—É—Ç–æ–º */}
              {promoCheck?.status === "loading" && (
                <p className={styles.promoInfo}>–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É‚Ä¶</p>
              )}
              {promoCheck?.status === "success" && promoCheck?.available && (
                <p className={styles.promoSuccess}>–ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ ‚úÖ</p>
              )}
              {promoCheck?.status === "success" && promoCheck?.alreadyUsed && (
                <p className={styles.promoError}>
                  ‚ùå –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥
                </p>
              )}
              {promoCheck?.status === "fail" && (
                <p className={styles.promoError}>–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥—É</p>
              )}
            </div>

            <div>
              <AllSumm />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className={styles.divButtons}>
              <button
                type="button"
                className={styles.buttonBack}
                onClick={onPrev}
              >
                –ù–∞–∑–∞–¥
              </button>
              {/* <button type="submit" className={styles.buttonNext}>
                –î–∞–ª—ñ
                <svg className={styles.btnSvg} width="23" height="12">
                  <use
                    className={styles.sparowIcon}
                    href={`${icons}#icon-sparow`}
                  ></use>
                </svg>
              </button> */}
              <button
                type="submit"
                className={styles.buttonNext}
                disabled={isPromoUsed || isChecking}
                title={
                  isPromoUsed
                    ? "–¶–µ–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏"
                    : isChecking
                    ? "–ô–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥—É‚Ä¶"
                    : undefined
                }
              >
                –î–∞–ª—ñ
                <svg className={styles.btnSvg} width="23" height="12">
                  <use
                    className={styles.sparowIcon}
                    href={`${icons}#icon-sparow`}
                  ></use>
                </svg>
              </button>
            </div>
          </Form>
        );
      }}
    </Formik>
  );
};

export default ParcelData;
